https://www.youtube.com/watch?v=Dkx8Pl6QKW0
활용편 1. 추억의 오락실 게임을 만들어보아요.

start! 1/26 2021

1. 나도코딩 소개
2. 활용편 1 소개

3. 환경설정 &프레임

터미널에 pip install pygame 적고 엔터. 다운로드 대기.

3. 2 프레임부분

import pygame

pygame.init()  #초기화(반드시 필요한 부분)

#화면 크기 설정
screen_width = 480  #가로 크기
screen_height = 640   #세로크기
screen = pygame.display.set_mode((screen_width,screen_height))

#화면 타이틀 설정

pygame.display.set_caption("Jason's Game")  #게임 이름

#이벤트 루프 (계속프로그램이 종료되지않도록 대기+ 사용자가 마우스, 키보드등의 인풋이 들어오는지 확인.)

running = True #게임을 진행중으로 디폴트설정.
while running:
    for event in pygame.event.get(): #어떤 이벤트가 발생하였는가?
        if event.type == pygame.QUIT: #창이 닫히는 이벤트가 발생하였는가?
            running = False #게임이 진행중이 아니도록 바꿈
pygame.quit() #게임이 진행중이 아닌경우 - while문을 빠져나와서 pygame = 종료


4.배경

#배경 이미지 불러오기
background = pygame.image.load("C:/Users/gggab/OneDrive/Desktop/PythonWorkspace/pygame_basic/background.png")

#파일 경로부분 원래 역슬래시였지만 탈출문자 처리때문에
 \\혹은 /로 바꿔주어야만 한다. 여기서는 /로 바꿈.


#이벤트 루프부분 수정 
running = True #게임이 진행중인가??
while running:
    for event in pygame.event.get(): #어떤 이벤트가 발생하였는가?
        if event.type == pygame.QUIT: #창이 닫히는 이벤트가 발생하였는가?
            running = False #게임이 진행중이 아님

    # screen.fill((0,0,255)) #RGB값
    screen.blit(background, (0,0)) #배경파일 그리기, 
                            #위치는 (0,0). (0,0)은 화면의 가장왼쪽가장위를 뜻함
    pygame.display.update() #게임화면 다시 그리기! 계속 다시 해야한다.


5. 캐릭터

#스프라이트(캐릭터) 불러오기
character = pygame.image.load("C:/Users/gggab/OneDrive/Desktop/PythonWorkspace/pygame_basic/character.png")
character_size = character.get_size()  #캐릭터 파일의 사이즈를 가져옴
character_width = character_size[0] #캐릭터의 가로크기 (위에서 불러온 데이터의 첫번째 값)
character_height = character_size[1] #캐릭터의 세로크기 (위에서 불러온 데이터의 두번째 값)
character_x_pos = (screen_width-character_width)/2 	# 화면 가로길이의 절반위치에 위치((240-56)/2)
						    (캐릭파일 가로 = 56)
# character_y_pos = screen_height 	#화면 세로길이의 가장 아래에 위치(640)
#이경우 그림이 오른쪽 아래로 그려지기때문에 화면상에 보이지않는다.
character_y_pos = screen_height - character_height  	#화면 세로길이의 가장 아래에 위치(640-70)
						    (캐릭파일 세로 = 70)

#이벤트 루프 
running = True #게임이 진행중인가??
while running:
    for event in pygame.event.get(): #어떤 이벤트가 발생하였는가?
        if event.type == pygame.QUIT: #창이 닫히는 이벤트가 발생하였는가?
            running = False #게임이 진행중이 아님

    screen.blit(background, (0,0)) #배경파일 그리기, 
                            #위치는 (0,0). (0,0)은 화면의 가장왼쪽가장위를 뜻함
    screen.blit(character,(character_x_pos,character_y_pos))
    pygame.display.update() #게임화면 다시 그리기! 계속 다시 해야한다.
#pygame = 종료
pygame.quit()


6. 키보드 이벤트

#이동할 좌표
to_x = 0
to_y = 0

#이벤트 루프 
running = True #게임이 진행중인가??
while running:
    for event in pygame.event.get(): #어떤 이벤트가 발생하였는가?
        if event.type == pygame.QUIT: #창이 닫히는 이벤트가 발생하였는가?
            running = False #게임이 진행중이 아님
        if event.type == pygame.KEYDOWN: #키가 눌러졌는지 확인
            if event.key ==pygame.K_LEFT:
                to_x -= 5   #위에서 to_x, to_y값 0으로 설정해준후에 써야한다.
            elif event.key == pygame.K_RIGHT:
                to_x += 5
            elif event.key ==pygame.K_UP:
                to_y -= 5
            elif event.key == pygame.K_DOWN:
                to_y += 5

        if event.type == pygame.KEYUP:  #방향키를 떼면(누르지않으면) 멈추도록
            if event.key ==pygame.K_LEFT or event.key == pygame.K_RIGHT:
                to_x = 0
            elif event.key ==pygame.K_UP or event.key == pygame.K_DOWN:
                to_y = 0
    character_x_pos += to_x #위에서 쓴부분이 실제로 적용되도록 이부분을 써야함
    character_y_pos += to_y

    #가로 경계값 처리
    if character_x_pos < 0:
        character_x_pos = 0
    elif character_x_pos> screen_width-character_width:
        character_x_pos = screen_width-character_width

    #세로 경계값 처리
    if character_y_pos < 0:
        character_y_pos = 0
    elif character_y_pos> screen_height-character_height:
        character_y_pos = screen_height-character_height

    screen.blit(background, (0,0)) #배경파일 그리기, 
                            #위치는 (0,0). (0,0)은 화면의 가장왼쪽가장위를 뜻함
    screen.blit(character,(character_x_pos,character_y_pos))  #캐릭터 그리기

    pygame.display.update() #게임화면 다시 그리기! 계속 다시 해야한다.
#pygame = 종료
pygame.quit()



7. FPS(Frame per second)




#화면 타이틀 설정

#FPS
clock = pygame.time.Clock()   #타이틀,배경사이쯤에 이걸 추가시켜준다. 

#배경 이미지 불러오기


#이동속도
character_speed = 0.6

#이벤트 루프 
running = True #게임이 진행중인가??
while running:
    dt = clock.tick(120) #dt=델타라고 읽음/ 게임화면의 초당 프레임 수를 설정
    print("fps : " +str(clock.get_fps())) #터미널에 fps표시

    for event in pygame.event.get(): #어떤 이벤트가 발생하였는가?
        if event.type == pygame.QUIT: #창이 닫히는 이벤트가 발생하였는가?
            running = False #게임이 진행중이 아님
        if event.type == pygame.KEYDOWN: #키가 눌러졌는지 확인
            if event.key ==pygame.K_LEFT:
                to_x -= character_speed   #위에서 to_x, to_y값 0으로 설정해준후에 써야한다.
            elif event.key == pygame.K_RIGHT:
                to_x += character_speed
            elif event.key ==pygame.K_UP:
                to_y -= character_speed
            elif event.key == pygame.K_DOWN:
                to_y += character_speed

        if event.type == pygame.KEYUP:  #방향키를 떼면(누르지않으면) 멈추도록
            if event.key ==pygame.K_LEFT or event.key == pygame.K_RIGHT:
                to_x = 0
            elif event.key ==pygame.K_UP or event.key == pygame.K_DOWN:
                to_y = 0

    character_x_pos += to_x * dt 	#위에서 쓴부분이 실제로 적용되도록 이부분을 써야함
    character_y_pos += to_y * dt 	#dt=1/fps 라서 이걸 곱해줌으로써 
				    프레임별로 속도가 달라지는걸 방지할수있다.


#캐릭터가 1초에 100만큼 이동을 해야함
10 fps : 1초동안에 10번 동작 -> 한번에 10만큼 이동!  10*10
50fps : 1초동안에 2번 동작 -> 한번에 2만큼 이동!  2*50

근데 우리가 위에서 설정한건 초당 몇이 아니라 그냥 고정값을 주었기때문에, 
fps가 올라갈수록 이동속도자체가 올라가는 현상 발생 그걸 방지하기위해서 마지막줄쯤에 
character_x_pos += to_x 이거 뒤에 *dt를 추가함.


0:47  1일차 끝

8. 충돌처리


@캐릭터 부분 복붙해서 적캐릭터 생성
#적 캐릭터 enemy
enemy = pygame.image.load("C:/Users/gggab/OneDrive/Desktop/PythonWorkspace/pygame_basic/enemy.png")
enemy_size = enemy.get_size()
enemy_width = enemy_size[0]
enemy_height = enemy_size[1] 
enemy_x_pos = (screen_width-enemy_width)/2 
enemy_y_pos = (screen_height/2) - (enemy_height/2)


@블릿함수 부분에 적캐릭터도 표시하도록 추가

    screen.blit(background, (0,0)) #배경파일 그리기, 
                            #위치는 (0,0). (0,0)은 화면의 가장왼쪽가장위를 뜻함
    screen.blit(character,(character_x_pos,character_y_pos))  #캐릭터 그리기(대상,좌표)
    screen.blit(enemy,(enemy_x_pos,enemy_y_pos))    #적그리기



@경계값과 블릿함수 사이위치에 충돌 처리부분 업데이트

#충돌처리를 위한 rect 정보 업데이트
    character_rect = character.get_rect()
    character_rect.left = character_x_pos   #아래쪽에서 blit함수 같은경우는 이미지를 원하는 위치에
    character_rect.top = character_y_pos    # 그림을 표시 해줄뿐, 실제의 위치를 변경시켜주진않는다.
                                            #그렇기때문에 이런 작업이 필요하다.
    enemy_rect = enemy.get_rect()
    enemy_rect.left = enemy_x_pos  
    enemy_rect.top = enemy_y_pos


@충돌이 잘 되는지 알아보기위해 캐릭터와 적캐릭터의 rect가 맞닿는순간 "충돌했어요"라는 문구와함게 게임종료되도록 설정.
    #충돌 체크
    if character_rect.colliderect(enemy_rect):   #colliderect = 사각형기준으로 충돌이 있었는지 체크
        print("충돌 했어요")
        running = False

9. 텍스트

@이벤트 루프 위쪽에 시간정보 표시를 위한 데이터를 적는다

# 폰트 정의
game_font = pygame.font.Font(None, 40) #폰트 객체 생성 (폰트, 크기) none = 기본값

# 총 시간
total_time = 10

# 시작 시간 정보
start_ticks = pygame.time.get_ticks() #현재 tick을 받아옴



@충돌 체크 아래부분에 게임 시간 표시를 위한 코드를 작성한다.

    # 타이머 집어 넣기
    # 경과 시간 계산
    elapsed_time = (pygame.time.get_ticks() - start_ticks) / 1000
    # 경과 시간(ms)을 1000으로 나누어서 초(s) 단위로 표시

    timer = game_font.render(str(int(total_time - elapsed_time)), True, (255, 255, 255)) 
    # 9.432 8.213이런식으로 시간 표시되면 안되니까 정수표기위해서 int로 한번 덮고 다시 문자형으로 str.
    # 출력할 글자, antialias 경계 흐리기/부드럽게 표시, 글자 색상(RGB)
    screen.blit(timer, (10, 10))


# 만약 시간이 0 이하이면 게임 종료
    if total_time - elapsed_time <= 0:
        print("타임아웃")
        running = False

    pygame.display.update() # 게임화면을 다시 그리기! 계속 다시 해야한다.


너무 급작스럽게 꺼지는것 같으니 잠시 여유 주기.

#종료전 잠시 대기
pygame.time.delay(2000) # 2초 정도 대기 (ms)

10. 지금까지 정리 및 게임 개발 프레임 정리.


@@@11. +12. 퀴즈 1

Quiz) 하늘에서 떨어지는 똥 피하기 게임을 만드시오

[게임 조건]
1. 캐릭터는 화면 가장 아래에 위치, 좌우로만 이동 가능
2. 똥은 화면 가장 위에서 떨어짐, x좌표는 매번 랜덤으로 설정
3. 캐릭터가 똥을 피하면 다음 똥이 다시 떨어짐
4. 캐릭터가 똥과 충돌하면 게임 종료
5. FPS는 30으로 고정

[게임 이미지]
1. 배경 : 640*480 (세로 가로)
2. 캐릭터 : 70*70
3. 똥 : 70*70

@@정답 = C:\Users\gggab\OneDrive\Desktop\PythonWorkspace\pygame_basic\quiz 1\quiz_1.py

1:22
2일차 끝 



13. 프로젝트

오락실 pang 게임 만들기

[게임 조건]
1. 캐릭터는 화면 아래에 위치, 좌우로만 이동 가능
2. 스페이스를 누르면 무기를 쏘아 올림
3. 큰 공 1개가 나타나서 바운스
4. 무기에 닿으면 공은 작은 크기 2개로 분할, 가장 작은 크기의 공은 사라짐
5. 모든 공을 없애면 게임 종료(성공)
6. 캐릭터는 공에 닿으면 게임 종료 (실패)
7. 시간 제한 99초 초과시 게임 종료(실패)
8. FPS는 30으로 고정 (필요시 speed 값을 조정)

[게임 이미지]
1. 배경 : 640*480 (가로 세로) - background.png
2. 무대 : 640*50 - stage.png
3. 캐릭터 : 33*60 - character.png
4. 무기 : 20*430 - weapon.png
5. 공 : 160*160, 80*80, 40*40, 20*20 - balloon1.png~ balloon4.png




14. 배경과 캐릭터

우선 이전에 만들었던 frame부분을 복붙한다.
그후, 이미지를 불러오는데 이전과 다른 방식으로 불러오기 위해서 os를 import 한다.

import pygame
import os

################################################
# 기본 초기화
pygame.init()  #초기화(반드시 필요한 부분)

#화면 크기 설정
screen_width = 640  #가로 크기
screen_height = 480   #세로크기
screen = pygame.display.set_mode((screen_width,screen_height))

이부분까지는 이전과 같은 방식으로 숫자만 바꿔서 입력해준다.

#화면 타이틀 설정
pygame.display.set_caption("Jason's second game")  #게임 이름

게임 이름은 이렇게 설정해 주고

#FPS
clock = pygame.time.Clock()
################################################  이부분은 무조건 해야하는부분

#1. 사용자 게임 초기화(배경, 게임이미지, 좌표, 속도, 폰트등등)

#이전과 다른 방식으로 배경을 가져와보기
current_path = os.path.dirname(__file__)  #현재 파일의 위치 반환
image_path = os.path.join(current_path, "images")  #images 폴더 위치 반환

#이런 방식으로 os를 통해 현재 위치를 불러오고,
os.path.dirname(__file__) 을 통해서. 
이경우에는 현재 파일(py파일)이 있는 위치를 불러오게된다.

그다음
os.path.join(current_path, "images")이부분 같은 경우는 
ptath.join을 통해서 current_path안에있는 image폴더안에 들어가는식으로 연결할수 있다.
아래에서도 계속 같은 방식을 통해서 이미지를 불러올 예정.
이미지를 불러온 후에는 그때그때 아래로 가서 screen.blit을 통해 이미지를 업로드하고 실행해서 제대로 들어갔나 확인해주자.


#배경 만들기
background = pygame.image.load(os.path.join(image_path, "background.png"))

#스테이지 만들기
stage = pygame.image.load(os.path.join(image_path, "stage.png"))
stage_size = stage.get_rect().size
stage_height = stage_size[1]  #스테이지의 높이 위에 캐릭터두기, 공 튕기게 하기위해.

#캐릭터 만들기
character = pygame.image.load(os.path.join(image_path, "character_front.png"))
character_size = character.get_rect().size
character_width = character_size[0]
character_height = character_size[1]
character_x_pos = (screen_width/2) - (character_width/2)
character_y_pos = screen_height- character_height-stage_height

running = True #게임이 진행중인가??
while running:
    dt = clock.tick(60) #dt=델타라고 읽음/ 게임화면의 초당 프레임 수를 설정

    #2. 이벤트 처리(키보드, 마우스 등)
    for event in pygame.event.get(): #어떤 이벤트가 발생하였는가?
        if event.type == pygame.QUIT: #창이 닫히는 이벤트가 발생하였는가?
            running = False #게임이 진행중이 아님

    #3. 게임 캐릭터 위치 정의 및 경계값 처리

    #4. 충돌 처리

    #5. 화면에 그리기 
    screen.blit(background, (0, 0))
    screen.blit(stage, (0, screen_height-stage_height))
    screen.blit(character, (character_x_pos,character_y_pos))

    
    #6. 업데이트
    pygame.display.update()

pygame.quit()



15. 무기와 키보드 이벤트


character_y_pos = screen_height - character_height - stage_height +10
#이부분에서 캐릭터 png파일의 발밑이 비어있길래 내가임의로 캐릭터 높이를 살짝 내림.

#캐릭터 이동 방향
character_to_x = 0
#캐릭터 이동 속도
character_speed = 5
#캐릭터 이동 방향및 속도설정해주고, 아래쪽에 이벤트 처리에서 좌우 이동키 입력시 실행할 작업을 적어준다.


#그후에 무기를 다음과같이 만들어주고, 무기에 닿은 공을 충돌처리 해야하기때문에 size와width값을 가져와준다.

#무기 만들기
weapon = pygame.image.load(os.path.join(image_path, "weapon.png"))
weapon_size = weapon.get_rect().size
weapon_width = weapon_size[0]



#무기는 한번에 여러발 발사 가능
weapons = []    #리스트로 일단 생성
#이부분은 좀더 아래에서 다시 다루겠다.

#무기 이동 속도
weapon_speed = 15
#영상에선 10이었지만 임의로 15로 변경.


running = True #게임이 진행중인가??
while running:
    dt = clock.tick(60) #dt=델타라고 읽음/ 게임화면의 초당 프레임 수를 설정

    #2. 이벤트 처리(키보드, 마우스 등)
    for event in pygame.event.get(): #어떤 이벤트가 발생하였는가?
        if event.type == pygame.QUIT: #창이 닫히는 이벤트가 발생하였는가?
            running = False #게임이 진행중이 아님
        
        if event.type == pygame.KEYDOWN:
            if event.key ==pygame.K_LEFT:
                character_to_x -= character_speed   
            elif event.key == pygame.K_RIGHT:
                character_to_x += character_speed
            elif event.key == pygame.K_SPACE:
                weapon_x_pos = character_x_pos + (character_width / 2) - (weapon_width / 2)
#발사하는 무기의 중앙의 x값과, 발사하는순간의 캐릭터의 중앙의 x값을 일치시킨다.

                weapon_y_pos = character_y_pos  #캐릭터의 머리위치에서 발사한다 가정
                weapons.append([weapon_x_pos,weapon_y_pos]) 
#weapons리스트(위쪽에서 리스트로 만들었다.)에 x y위치정보를 또다른 리스트의 형태로 추가.

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                character_to_x = 0

    #3. 게임 캐릭터 위치 정의 및 경계값 처리
    character_x_pos += character_to_x

    if character_x_pos < 0:
        character_x_pos = 0
    if character_x_pos > screen_width-character_width:
        character_x_pos = screen_width-character_width
#이부분은 이전에 했던것과 동일한 부분. 따로 설명하지 않는다.



#아래의 두부분이 중요한+어려운 부분이다.


    #무기 위치 조정
    weapons = [[w[0], w[1] - weapon_speed] for w in weapons] #무기의 위치를 위로 올림(위로 발사)

    #이전에 잠시 배웠던 '한줄 for'를 활용했다.
    #여기서의 w는 weapons안에있는 하나의 list(x,y데이터를 가진)값(스페이스바를 누를때마다 하나씩 리스트에 추가되어있음).     #그 w의 첫번째, 두번째 값을 불러온후 (w[0],w[1]), 
    #어떤처리를(두번째 값에다가 speed만큼 빼는 작업) 한후, 다시 weapons로 값을 집어넣어라, 그런의미.
    #ex) (100,200)에서 무기발사했다면, 그 위치가 (100,190), (100,180), (100,170)...
    #    (500,200)에서 발사한건 (500,190), (500,180), (500,170)... 이렇게 바뀌어야함.(내가한건 무기속도가 15임)

    #천장에 닿은 무기 제거
    weapons = [ [w[0], w[1]] for w in weapons if w[1] > 0 ]
    #위에서 설정한 weapons안의 w를 다시한번 불러와서, 그중에서 y값이 0보다 큰것만 weapons로 넣겠다는 의미.
    #결론적으로 y값이 0과 같거나 작아지는 순간(천장에 닿는 순간), 그건 weapons리스트에서 
    #없어진 데이터가 되어버리므로, 사라지게된다.

    #4. 충돌 처리

    #5. 화면에 그리기 
    screen.blit(background, (0, 0))

    for weapon_x_pos,weapon_y_pos in weapons:
        screen.blit(weapon, (weapon_x_pos,weapon_y_pos))
#무기같은경우는 한개가 아니라 여러개라 for문을 활용해서 blit하였다.
우선도는 배경보다는 높고, 스테이지와 캐릭터보다는 낮게 설정해서 캐릭터, 스테이지가 무기보다 항상 위에 표시되도록.

    screen.blit(stage, (0, screen_height-stage_height))
    screen.blit(character, (character_x_pos,character_y_pos))


    #6. 업데이트
    pygame.display.update()

pygame.quit()



16. 공 만들기


#공 만들기 (4개의 크기에 대해 따로 처리)
ball_images = [\
    pygame.image.load(os.path.join(image_path, "balloon1.png")),
    pygame.image.load(os.path.join(image_path, "balloon2.png")),
    pygame.image.load(os.path.join(image_path, "balloon3.png")),
    pygame.image.load(os.path.join(image_path, "balloon4.png"))]
공의 이미지들을 불러온다. 크기별로 4가지의 이미지인데, 각각balls 라는 리스트의 항목으로 추가.


#공 크기에 따른 최초 스피드
ball_speed_y = [-18, -15, -12, -9]  #index 0,1,2,3에 해당하는 값

#큰공일수록 높이 튀어오르도록 설정하기 위해서 이와같이 최초 스피드를 설정한다.
값이 음수인 이유는 처음에 생성되었을때 위쪽으로 튕겨져 올라가는 형식을 띠게 하기 위함.

#공들
balls = []

공들을 집어넣을 리스트 추가.

#최초 발생하는 큰 공 추가(dictionary 타입으로 생성)
balls.append({
    "pos_x": 50,    #공의 x 좌표
    "pos_y":50,     #공의 y 좌표
    "img_idx : 0,"  #공의 이미지 인덱스
    "to_x":3        #공의 x축 이동방향, -3이면 왼쪽으로, 3이면 오른쪽으로
    "to_y": -6      #공의 y축 이동방향, 처음에 살짝 위로올라갔다내려오게하기위해 -값으로 설정
    "init_spd_y": ball_speed_y[0]   #공의 y축 최초 속도
    })

최초의 공에대한 정보를 딕셔너리 타입으로 생성했다.
각각의 정보에 해당하는 값을 가지도록 만듬.
{a:1, b:2, c:3 ...}등 여러개의 쌍으로 이루어진 하나하나의 사전을 통째로 balls라는 리스트의 항목으로 설정할 예정.




17. 공 튕기기

###
이 부분에 들어가기전에 enumerate함수를 먼저 공부해보자.
(참고 자료 : 
https://cafe.naver.com/funcc/53513,
https://blog.naver.com/youndok/222053465832)

lst = ["가","나","다"]
for a in enumerate(lst):
    print(a)
>>>
(0, '가')
(1, '나')
(2, '다')
이와같이 for 다음에 하나의 값만 설정한 경우에는 자동으로 0번째 부터 해서 리스트에있는걸 하나씩 쌍을 지어 출력(괄호로 묶음)
---------------------------------------------------------------------------------------------------------
for a,b in enumerate(lst):
    print(a,b)
>>>
0 가
1 나
2 다
이와같이 for다음에 두개의 값을 설정한 경우에는 자동으로 0번째 부터 해서 리스트에 있는걸 하나씩 쌍을 지어 출력하지만, 
괄호로는 묶지않음

@@조금 부연설명을 하자면@@ 
lst = ["a","b","c","d","e"]
for x,y in enumerate(lst): 
    print(x,y)

>>> 
0 a
1 b
2 c
3 d
4 e

그러니까 여기서 x는 어쨌든 index. 그러니까.. 0부터 시작하는 순번이 되는거고, 
y는 lst에 있는 데이터가 순서대로 나오는게 되는셈. (기존에 x=ddd, y=sss 하고 x와y의 값을 정의해주지 않았어도 무관.)

---------------------------------------------------------------------------------------------------------
for a in enumerate(lst,5):
    print(a)
>>>
(5, '가')
(6, '나')
(7, '다')
이와같이 for다음에 하나의 값만 설정+ 함수 뒤에 두개의 값을설정한 경우에는 두번째값부터 시작해서 자동으로 리스트에 있는걸 하나씩 쌍을 지어 출력
---------------------------------------------------------------------------------------------------------
for a,b in enumerate(lst,5):
    print(a,b)
>>>
5 가
6 나
7 다
이와같이 for다음에 두개의 값을 설정+ 함수 뒤에도 두개의 값을설정한 경우에는 두번째값부터 시작해서 자동으로 리스트에 있는걸 하나씩 쌍을 지어 출력하지만, 괄호로는 묶지않음
---------------------------------------------------------------------------------------------------------
###



fff = {"a":15, "b":2, "c":3}
print(fff["a"])

>>>15
이와같이 사전내의 어떤 정보를 불러올때는 사전이름[내용물이름]식으로 불러올수있다.



lst = [{"q":"12", "w":"23", "e":"34"},{"q":"123", "w":"234", "e":"345"}]
for x,y in enumerate(lst): 
    abcde = y["e"]
    print(abcde)

>>>
34
345

마찬가지로 리스트의 데이터가 각각의 사전인경우,
위의 for 함수에서의 y는 각각의 사전을 의미한다 
(각각 두번의 실행과정동안 y= {"q":"12", "w":"23", "e":"34"}, y={"q":"123", "w":"234", "e":"345"} 인거나 마찬가지)

그래서 abcde= y["e"]로 작성하면
abcde = y라는 사전내에존재하는 "e"의 값. 이라는 뜻과 동일하다.

위에 적힌 정보를 공부하고 영상내에 있는 내용을 보자.



#공 크기에 따른 최초 스피드
ball_speed_y = [-18, -15, -12, -9]  #index 0,1,2,3에 해당하는 값

#공들
balls = []

#최초 발생하는 큰 공 추가(dictionary 타입으로 생성)
balls.append({
    "pos_x": 50,    #공의 x 좌표
    "pos_y":50,     #공의 y 좌표
    "img_idx" : 0,  #공의 이미지 인덱스
    "to_x":3,        #공의 x축 이동방향, -3이면 왼쪽으로, 3이면 오른쪽으로
    "to_y": -6,      #공의 y축 이동방향, 처음에 살짝 위로올라갔다내려오게하기위해 -값으로 설정
    "init_spd_y": ball_speed_y[0]   #공의 y축 최초 속도
    })

@@우선 위에 부분은 보기편하도록 위에서 가져옴. 수정사항없음.@@


#공 위치 정의
    for ball_idx, ball_val in enumerate(balls): 
        #각각의 공 위치를 정의할때, 
        #공의 인덱스 넘버가 필요해서 이와같이 설정. 
        ball_pos_x = ball_val["pos_x"]
        ball_pos_y = ball_val["pos_y"]
        ball_img_idx = ball_val["img_idx"]

        #ball_pos_x = ball_val로 정의한 사전(balls의 각 항목)에서 pos_x값
        #ball_pos_y와 idx도 마찬가지

        ball_size = ball_images[ball_img_idx].get_rect().size
        ball_width = ball_size[0]
        ball_height = ball_size[1]
        #그리고 볼의 폭과 높이 설정 (공 크기마다 사이즈가 달라지므로 이렇게 for문안에서 처리)


        #가로벽에 닿았을 때 공 이동 위치 변경 (튕겨 나오는 효과)
        if ball_pos_x < 0 or ball_pos_x > screen_width-ball_width:
            ball_val["to_x"] = ball_val["to_x"]*-1  
        #공이 벽에 부딪히면 x축 이동방향에 -1을 곱해서 반대로 바꿔줌.

        #세로 위치
        #스테이지에 튕겨서 올라가는 처리
        if ball_pos_y >= screen_height-stage_height - ball_height:
            ball_val["to_y"] = ball_val["init_spd_y"]
        #볼에 아래를 향한 가속도를붙임.
        #init_spd_y는 걍 튕길때마다 새로이 처리되는 공의 스피드.

        else:
            ball_val["to_y"] += 0.5
        #이렇게 되면 처음 to_y값(-6)으로 위로 올라가다가 점점 올라가는 속도가
        #줄어들게되고, 0이 되는순간부터는 아래로 점점 빠르게 내려오게된다.
        #그러다가 stage높이에 닿는순간 init_spd_y의 속도(-18)로 튕겨올라가고,
        #그것을 반복하는 움직임을 보이게 됨.

        #위에서 정리한 to_x 와 to_y의 값을 틱(tick)마다 공 위치에 반영
        ball_val["pos_x"] += ball_val["to_x"]
        ball_val["pos_y"] += ball_val["to_y"]


#5. 화면에 그리기 
    screen.blit(background, (0, 0))

    for weapon_x_pos,weapon_y_pos in weapons:
        screen.blit(weapon, (weapon_x_pos,weapon_y_pos))

    for idx, val in enumerate(balls):
        ball_pos_x = val["pos_x"]
        ball_pos_y = val["pos_y"]
        ball_img_idx = val["img_idx"]
        screen.blit(ball_images[ball_img_idx], (ball_pos_x,ball_pos_y))
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@위에 부분이 #공 위치 정의 부분 바로 밑에있는 for/enumerate 문과 거의 100%같은 내용인거같은데 왜 또 한번 써야하는지 이해가 잘안됨. 다시 생각해보자.


    screen.blit(stage, (0, screen_height-stage_height))
    screen.blit(character, (character_x_pos,character_y_pos))



2:10 3일차 끝





@@@@@@@@@@@키보드 방향키를 빨리 움직이면 캐릭터가 아예 멈춰버리는 현상이 있는데 개선할 방법이 있나요?


(답변) 프로젝트 코드 기준으로 아래와 같이 4군데를 수정하면 위 현상을 해결할 수 있습니다. x 좌표 이동 방향 처리를 왼쪽, 오른쪽으로 나누어서 key down / key up 에서 각각 처리하여 더해주는 방식입니다.

# 수정1 : 기존의 character_to_x 를 왼쪽 방향, 오른쪽 방향 변수 2개로 나눔
character_to_x_LEFT=0
character_to_x_RIGHT=0

...

for event in pygame.event.get():
	if event.type == pygame.QUIT:
		running = False

	# 수정2 : 키를 누를 때 LEFT, RIGHT 에 따라 서로 다른 변수의 값 조정
	if event.type == pygame.KEYDOWN:
		if event.key == pygame.K_LEFT:
			character_to_x_LEFT -= character_speed # 바뀐 부분
		elif event.key == pygame.K_RIGHT:
			character_to_x_RIGHT += character_speed # 바뀐 부분
		elif event.key == pygame.K_SPACE:
			...

	# 수정3 : 키에서 손을 뗄 때 LEFT, RIGHT 를 각각 처리
	if event.type == pygame.KEYUP:
		if event.key == pygame.K_LEFT: # 이 부분은 모두 다 바뀜
			character_to_x_LEFT = 0
		elif event.key == pygame.K_RIGHT:
			character_to_x_RIGHT = 0


# 수정4 : 두 변수의 값을 모두 더함
character_x_pos += character_to_x_LEFT + character_to_x_RIGHT

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
좌우를 동시에 누르고있게될경우 나중에 누른것만 적용되도록해서, 나중에 누른 방향으로 움직이게 할 수 있나요?
(위에꺼는 한쪽을 떼기전에 다른쪽을 중복되게누른경우 일단은 멈추고, 둘중 한쪽방향키를 떼면 움직이지, 둘다 누른채로는 안움직임, 그부분 해결을 위한 방법)

character_to_x_right = 0
character_to_x_left = 0
아래쪽에 
left_pressed = False
right_pressed = False
추가


그후에 아래부분 추가.
if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                character_to_x_LEFT -= character_speed
                left_pressed = True (#추가)
                if right_pressed: (#추가)
                    character_to_x_RIGHT = 0 (#추가)
                    right_pressed = False (#추가)
            elif event.key == pygame.K_RIGHT:
                character_to_x_RIGHT += character_speed
                right_pressed = True (#추가)
                if left_pressed: (#추가)
                    character_to_x_LEFT = 0 ( #추가)
                    left_pressed = False (#추가)

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                character_to_x_LEFT = 0
                left_pressed = False (#추가)

            elif event.key == pygame.K_RIGHT:
                character_to_x_RIGHT = 0
                right_pressed = False (#추가)


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
위에부분 적용완료.





18. 충돌처리
#### 충돌처리를 사각형말고 다른방법(이미지의 경계선을 따라서 하거나 원형으로 하거나 등등)으로 하고싶을때 아래참고
https://nightshadow.tistory.com/entry/pygame-%EC%9D%98-%EC%8A%A4%ED%94%84%EB%9D%BC%EC%9D%B4%ED%8A%B8-%EC%B6%A9%EB%8F%8C%EC%B2%B4%ED%81%AC-%EB%B0%A9%EB%B2%95


@@@@@@@@@@@pos_x, pos_y랑 x_pos, y_pos를 구분해서 적은건가 아님 걍 적은건가 모르겠다.
끝나고 알아보기@@@@@@@@@@@@@@@



우선 

#캐릭터 rect 정보 업데이트
    character_rect = character.get_rect()
    character_rect.left = character_x_pos
    character_rect.top = character_y_pos
캐릭터 렉트정보 업데이트하고,

각각의 공에 대한 충돌여부를 체크해야하기때문에 아래 내용을 위쪽에서 복붙해서 가져온다.
    for ball_idx, ball_val in enumerate(balls): 
        ball_pos_x = ball_val["pos_x"]
        ball_pos_y = ball_val["pos_y"]
        ball_img_idx = ball_val["img_idx"]

그리고나서 공의 rect정보를 업데이트 해주고,
(이부분 첫줄은 "ball_size = ball_images[ball_img_idx].get_rect().size" 여기 사이즈 가져오는 부분에서 살짝만 바꿈)
        #공 rect 정보 업데이트
        ball_rect = ball_images[ball_img_idx].get_rect()
        ball_rect.left = ball_pos_x
        ball_rect.top = ball_pos_y

        #공과 캐릭터 충돌 체크
        if character_rect.colliderect(ball_rect):
            running = False
            break
@@@@충돌시 겜꺼지게 설정됨. 나중에 gameover뜨게 바꾸자.


 #공과 무기들 충돌처리
이것도 무기 하나가 아니라 무기들에 대해서 작업해야하니까 아래처럼 작성
        for weapon_idx, weapon_val in enumerate(weapons): 
            weapon_pos_x = weapon_val[0]
            weapon_pos_y = weapon_val[1]
#weapons에 있는 항목이 (x,y)형식이라서 [0] [1]을 이용해서 필요한 값만 추출

            #무기 rect정보 업데이트
            weapon_rect = weapon.get_rect()
            weapon_rect.left = weapon_pos_x
            weapon_rect.top = weapon_pos_y


            #충돌 체크

위쪽에 while문과 최초발생큰공추가 부분 사이에 다음과 같은 변수 추가.

#사라질 무기, 공 정보 저장 변수
weapon_to_remove = -1
ball_to_remove = -1
#리스트가 아니라 그냥 하나의 값으로 설정.

            if weapon_rect.colliderect(ball_rect):
                weapon_to_remove = weapon_idx #해당 무기 없애기 위한 값 설정 #weapon_idx는 따로 
                ball_to_remove = ball_idx #해당 공 없애기 위한 값 설정		정의해놓은 곳이있는게 아니라 바로 위 
                break						'#공과 무기들 충돌처리' 부분에 									'for...enumerate'구문 안에서 설정된다.
그후 무기 rect정보 아래쪽에 이렇게 작성해서,				ball_idx도 마찬가지.
무기와 공이 충돌하면 그 무기의 인덱스값이 weapon to remove값으로,
그 공의 인덱스값이 ball to remove값으로 설정되도록 함.

그다음 이제
#충돌된 공 and 무기 없애기
    if ball_to_remove > -1:     #이걸 위해서 위에 값을 -1로 설정해두었다.
        del balls[ball_to_remove] 	#balls 리스트에서 ball_to_remove값에 해당하는 ball_idx를 가진 ball 제거
        ball_to_remove = -1		#weapons도 마찬가지.

    if weapon_to_remove > -1:
        del weapon[weapon_to_remove]
        weapon_to_remove = -1

위쪽에 설정한대로 충돌한 공과 무기가 @@@_to_remove값으로 설정되면 -1보다 커지게 되고,
그 무기와 공은 del(딜리트)처리되도록. 그리고나서 다시 @@@_to_remove값을 -1로 되돌림.


2:27 4일차 끝


19. 공 쪼개기

#충돌 체크
            if weapon_rect.colliderect(ball_rect):
                weapon_to_remove = weapon_idx #해당 무기 없애기 위한 값 설정
                ball_to_remove = ball_idx #해당 공 없애기 위한 값 설정
여기까진 위에서함.

                #가장작은 크기의 공이 아니라면 다음단계의 공으로 나눠주기
                if ball_img_idx < 3: 			#0,1,2,3중에서 3보다 작음 = 가장작은거제외세가지
                    #현재 공 크기 정보를 가지고 옴
                    ball_width = ball_rect.size[0]
                    ball_height = ball_rect.size[1]
                    
                    #나눠진 공 정보
                    small_ball_rect = ball_images[ball_img_idx + 1].get_rect()
                    small_ball_width = small_ball_rect.size[0]
                    small_ball_height = small_ball_rect.size[1]

                    #왼쪽으로 튕겨나가는 작은 공
                    balls.append({
                        "pos_x": ball_pos_x + (ball_width / 2) - (small_ball_width / 2),    
                        #ball_pos_x는 공의 왼쪽끝이니까 폭의 절반만큼 더함(이게 큰공 중앙x값)
                        #여기서 작은공의 폭의 절반만큼 뺌,그걸 기준으로 오른쪽에 그려지니까, 그 공중앙이 큰공중앙이었던 선에 맞게 
                        "pos_y":ball_pos_y + (ball_height / 2) - (small_ball_height / 2),
                        #마찬가지로 ball_pos_y는 공의 위쪽끝, 높이절반 더함 - 큰공중앙,
                        #여기서 작은공 높이 절반 뺌, 큰공중앙보다 작은공반지름만큼 높은위치.
                        #->그래야 작은공의 중앙이 큰공중앙이었던 선과 같은 높이가 되므로. 
                        "img_idx" : ball_img_idx + 1,  #공의 이미지 인덱스
                        "to_x": -3,        #공의 x축 이동방향, -3이면 왼쪽으로, 3이면 오른쪽으로
                        "to_y": -6,      #공의 y축 이동방향, 처음에 살짝 위로올라갔다내려오게하기위해 -값으로 설정
                        "init_spd_y": ball_speed_y[ball_img_idx +1]})

                    #오른쪽으로 튕겨나가는 작은 공
                    balls.append({
                        "pos_x": ball_pos_x + (ball_width / 2) - (small_ball_width / 2),    
                        "pos_y":ball_pos_y + (ball_height / 2) - (small_ball_height / 2),
                        "img_idx" : ball_img_idx + 1,
                        "to_x": 3, #이것만 +3으로 하고 나머진 동일
                        "to_y": -6,  
                        "init_spd_y": ball_speed_y[ball_img_idx +1]})
                break


20. 게임오버

여기서 해야할일 세가지
1)  모든 공을 없애면 게임 종료(성공)
2) 캐릭터는 공에 닿으면 게임 종료 (실패)
3) 시간 제한 99초 초과시 게임 종료(실패)


우선 게임오버 글자를 넣기위해 폰트를 넣어보자,

while문 시작전부분에 

#폰트 정의
game_font = pygame.font.Font(None, 40)

#게임종료 메세지
#Time Over(시간 초과), Mission Complete(성공), Game Over(공에맞음)
game_result = "Game Over"   

#시간관련
total_time = 100
start_ticks = pygame.time.get_ticks() #시작시간 정의

이렇게 넣어준다.


@@타임오버부터 처리해보자

'화면에 그리기'에 있는
    screen.blit(stage, (0, screen_height-stage_height))
    screen.blit(character, (character_x_pos,character_y_pos))
요 부분 아래에 작성하기 시작한다.


#경과 시간 계산
    elapsed_time = (pygame.time.get_ticks() - start_ticks) / 1000
    timer = game_font.render("Time : {}".format(int(total_time - elapsed_time)), True, (255,255,255))
    screen.blit(timer, (10, 10))

    #시간 초과
    if total_time - elapsed_time <= 0:
        game_result = "Time Over"		#시간이 초과될경우 위에서 game_result = "Game Over"로
        running = False				정의해둔 부분을 "Time Over"로 변경처리

    #6. 업데이트
    pygame.display.update()		#이건 원래있던부분

이렇게함으로써 우선 게임중에 시간 표시되는거까진 완료가 된다.

그리고나서, 타임오버 메세지 차례인데,
#게임오버 메세지
msg = game_font.render(game_result, True, (255, 255, 0)) #노란색
msg_rect = msg.get_rect(center = (int(screen_width/2), int(screen_height/2)))
#center에 저렇게 넣어서(int는 걍 소수말고 정수값할라고 넣은거) 화면 중앙위치반환
#rect로 변수 이름설정했지만 사실 그것보다는 location설정이다. msg 글자둘레의 사각형의 센터의 위치를 지정해주는것

screen.blit(msg, msg_rect)
pygame.display.update()	#게임 진행중(while문)에 말고 끝난후에 blit하는거라 새로 업데이트가 필요. 

pygame.time.delay(2000)	#게임종료메세지 표시할 시간을 주기위해.

pygame.quit()


@@성공 부분

아주 간단하다. 아래 내용을 '충돌한 공 and 무기 없애기'부분 아래에 더해주면 끝.

    #모든 공을 없앤 경우 게임 종료 (성공)
    if len(balls) ==0:      #balls리스트의 길이(내부 항목의 개수)가 0이면,
        game_result = "Mission Complete"
        running = False

@@공에 닿아서 실패하는 부분.
이부분은 이미 되어있다. game_result의 디폴트값이 Game Over으로 되어있고, 
캐릭이 공에 닿으면 게임 종료처리되는 것도 이미 설정이 되어있으니, 건드릴것 없음!

21. 버그수정

공과 무기의 충돌부분에서

balls = [1,2,3,4]
weapons = [11,22,3,44]


for ball_idx, ball_val in enumerate(balls):
    print("ball :", ball_val)
    for weapon_idx, weapon_val in enumerate(weapons):
        print("weapon :", weapon_val)
        if ball_val == weapon_val:
            print("공과 무기 충돌")
            break

이렇게 비슷한 예시를 만들어보았다.
balls와 weapons의 항목값이 동일할때를 충돌로 가정하고 실행했을때,
>>>
ball : 1
weapon : 11
weapon : 22
weapon : 3
weapon : 44
ball : 2
weapon : 11
weapon : 22
weapon : 3
weapon : 44
ball : 3
weapon : 11
weapon : 22
weapon : 3
공과 무기 충돌
ball : 4
weapon : 11
weapon : 22
weapon : 3
weapon : 44

이와같은 결과가 나온다. 하지만 우리가 원했던건, ball4까지 가지않고, 공과 무기가 충돌하는 순간 두개의 for문 모두를 빠져나와서 
충돌한 무기와 공을 지우는 것인데, 위와 같이 충돌후에 곧바로 지우지않고 그 다음으로 이어가는 바람에
특정 상황에서 충돌한 공이 사라지지않는 현상 발생(무기가 정확히 공의 중앙에 닿았을때, 현재공과 충돌, 그리고 공과 무기없애기로 넘어가기전에 새로 생긴 공과 또 충돌을 하면서 ball_to_remove값을 또다시 바꿔버림으로써, 새로생긴공만 없애고 기존에 있던 현재공은 그대로 남아있는 상황이 종종 연출되곤한다.)

그 이유는 여기서의 break가 두개의 for문을 모두 탈출하길 바랬지만 그렇지못하고
    for weapon_idx, weapon_val in enumerate(weapons): 이 for문만 탈출했기 때문인데,
그렇다고 저 뒤에 탭을 하나없애고 break를 한번 더 적으면 애초에 두번째 for문의
enumerate함수가 적용이 안된다.

for ball_idx, ball_val in enumerate(balls):
    print("ball :", ball_val)
    for weapon_idx, weapon_val in enumerate(weapons):
        print("weapon :", weapon_val)
        if ball_val == weapon_val:
            print("공과 무기 충돌")
            break
        break

>>>ball : 1
weapon : 11
ball : 2
weapon : 11
ball : 3
weapon : 11
ball : 4
weapon : 11
이런식으로 또다른 문제 발생.

그걸 해결하기위해서 


for ball_idx, ball_val in enumerate(balls):
    print("ball :", ball_val)
    for weapon_idx, weapon_val in enumerate(weapons):
        print("weapon :", weapon_val)
        if ball_val == weapon_val:
            print("공과 무기 충돌")
            break
    else:
        continue
    print("바깥포문 브레이크")
    break

이와같이 else: continue를 해주면

이 else는 두번째 for문이 break가 되었을때만 진행되는 방향이 된다. 그렇게해서 충돌시에만 break를 통해 
else로 넘어가서 한번 더 break를 함으로써 두개의 for문을 둘다 탈출하게 할수있다.
print부분은 두번째 break가 작동하는걸 좀 더 명확하게 확인하기위해서 특정 문구를 출력하도록 설정한것뿐 필요한 부분이 아니니 신경쓸 필요가 없다.

이경우의 결과
>>> 
ball : 1
weapon : 11
weapon : 22
weapon : 3
weapon : 44
ball : 2
weapon : 11
weapon : 22
weapon : 3
weapon : 44
ball : 3
weapon : 11
weapon : 22
weapon : 3
공과 무기 충돌
바깥포문 브레이크

이와같이 설정한 문구를 출력함으로 보아 그뒤에 따라올 break또한 정상적으로 실행될것을 짐작할수있다.
그렇게 두개의 for문을 한번에 탈출 함으로써 버그 해결 완료. 

        #공과 무기들 충돌처리
        for weapon_idx, weapon_val in enumerate(weapons): 
            weapon_pos_x = weapon_val[0]
            weapon_pos_y = weapon_val[1]

            #무기 rect정보 업데이트
            weapon_rect = weapon.get_rect()
            weapon_rect.left = weapon_pos_x
            weapon_rect.top = weapon_pos_y

            #충돌 체크
            if weapon_rect.colliderect(ball_rect):
                weapon_to_remove = weapon_idx #해당 무기 없애기 위한 값 설정
                ball_to_remove = ball_idx #해당 공 없애기 위한 값 설정

                #가장작은 크기의 공이 아니라면 다음단계의 공으로 나눠주기
                if ball_img_idx < 3: 
                    #현재 공 크기 정보를 가지고 옴
                    ball_width = ball_rect.size[0]
                    ball_height = ball_rect.size[1]
                    
                    #나눠진 공 정보
                    small_ball_rect = ball_images[ball_img_idx + 1].get_rect()
                    small_ball_width = small_ball_rect.size[0]
                    small_ball_height = small_ball_rect.size[1]

                    #왼쪽으로 튕겨나가는 작은 공
                    balls.append({
                        "pos_x": ball_pos_x + (ball_width / 2) - (small_ball_width / 2),    
                        #ball_pos_x는 공의 왼쪽끝이니까 폭의 절반만큼 더함(이게 큰공 중앙x값)
                        #여기서 작은공의 폭의 절반만큼 뺌,그걸 기준으로 오른쪽에 그려지니까, 
                        #그 공중앙이 큰공중앙이었던 선에 맞게
                        "pos_y":ball_pos_y + (ball_height / 2) - (small_ball_height / 2),
                        #마찬가지로 ball_pos_y는 공의 위쪽끝, 높이절반 더함 - 큰공중앙,
                        #여기서 작은공 높이 절반 뺌, 큰공중앙보다 작은공반지름만큼 높은위치.
                        #->그래야 작은공의 중앙이 큰공중앙이었던 선과 같은 높이가 되므로. 
                        "img_idx" : ball_img_idx + 1,  #공의 이미지 인덱스
                        "to_x": -3,        #공의 x축 이동방향, -3이면 왼쪽으로, 3이면 오른쪽으로
                        "to_y": -6,      #공의 y축 이동방향, 처음에 살짝 위로올라갔다내려오게하기위해 -값으로 설정
                        "init_spd_y": ball_speed_y[ball_img_idx +1]})

                    #오른쪽으로 튕겨나가는 작은 공
                    balls.append({
                        "pos_x": ball_pos_x + (ball_width / 2) - (small_ball_width / 2),    
                        "pos_y":ball_pos_y + (ball_height / 2) - (small_ball_height / 2),
                        "img_idx" : ball_img_idx + 1,
                        "to_x": 3, #이것만 +3으로 하고 나머진 동일
                        "to_y": -6,  
                        "init_spd_y": ball_speed_y[ball_img_idx +1]})
                break
        else:
            continue    #안쪽 for문의 조건이 맞지않으면 continue, 바깥쪽 for문을 계속 수행
        break   #안쪽 for문에서 break를 만나면 여기로 진행 = 2중 for문을 한번에 탈출


    #위쪽 복잡한 구조를 아래와 같이 도식화 할 수있다.
    # for 바깥조건:
    #     바깥동작
    #     for 안쪽조건:
    #         안쪽동작
    #         if 충돌하면:
    #             break
    #     else:
    #         continue
    #     break



활용편 1. 게임만들기 파트 완료. 


2:52  5일차 끝
전체완료. 2021.02.03





@@@@@@@@@@@@@@@@@그외에 하고싶은부분 추가하기
방향에따른 캐릭터 이미지 변경					Done
죽었을때 모습변경/ 마리오처럼 올라갔다떨어지게			Done
버그@@@올라갔다떨어지는도중 방향키 누르면 y축움직임 멈춤@@@		Done
	 user_input = 1 위쪽에 추가
	이벤트 입력부분전체를 if user_input == 1: 아래에 넣고,
	죽은후에는 user_input = 0으로 바뀌게 설정함으로써 인풋을 막을수있었다. 


충돌기준 rect말고 이미지의 경계로 변경				Fail
음악넣기							Done
효과음넣기							Done

버튼만들어보기?
종료버튼 클릭시 종료하시겠습니까? 창 만들어지게 해보기(+일시정지기능)


단계만들어보기 (1단계클리어시 2단계로 진행)
점수만들기 - 크기별로(큰순서) 5, 10, 15, 20점
라이프 만들기? 점수 100점당 목숨 1개 라던가, 그리고 목숨 갯수 화면표시
 




@@Sound()와 Stream music 차이점

Sound() 객체로 생성한 음악 파일을 재생하는 것과 music.load()로 로드한 파일을 재생하는 것은 매우 유사하다.

하지만 둘의 차이점은 다음과 같다.

1)  Sound()는 재생 전에 파일 전부를 메모리에 올린다. 하지만 Stream music은 재생시 disk에서 streaming한다.

2) Sound() 객체는 여러 개를 만들어서 동시에 사용하던가 반복해서 중첩해서 사용할 수 있다. 하지만 Stream music은 하나의 stream만 제공하기에 다른 파일을 load()하면 이전에 재생되던 stream은 정지가 된다.

따라서 자주 사용하고, 재생 시간이 짧은 사운드는 Sound() 객체를 사용하고, 배경음악으로 지속적으로 재생되는 음악은 Stream music을 사용하는 식으로 구분해주면 될 것이다.


@배경음악넣기
pygame.mixer_music.load("C:\\Users\\gggab\\OneDrive\\Desktop\\PythonWorkspace\\pygame_basic\\pygame_project\\sound\\Eternal Snow.mp3")
위와같이 배경음악 파일을 로드해주고,

pygame.mixer_music.play(-1)
위와같이 플레이되도록 할수있다.


play(loops=0, start=0.0)
loops 값을 통해 반복 횟수를 정하고, start 값을 통해 음악 파일의 시작 점을 정할 수 있다. play(-1)을 하면 무한 반복된다.
pygame.mixer_music.play(-1,50) 이처럼 적으면 무한반복, 시작은 파일의 50초부분부터시작. 이런식으로 실행된다.


music streming도 Sound 객체와 마찬가지로 fadeout(milliseconds),  get_volume(), set_volume(float) 등의 메서드를 사용할 수 있다.

@음악 예시 코드
	pygame.mixer.music.load( "background.mp3" )
	pygame.mixer.music.play(-1)
	pygame.mixer.music.stop()
	pygame.mixer.music.set_voume(0.7)
	pygame.mixer.music.pause()
	pygame.mixer.music.unpause()
	pygame.mixer.music.fadeout(1000)



